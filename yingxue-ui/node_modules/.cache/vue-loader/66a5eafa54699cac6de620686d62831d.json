{"remainingRequest":"E:\\javafile\\yingxue-admin\\yingxue-ui\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!E:\\javafile\\yingxue-admin\\yingxue-ui\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!E:\\javafile\\yingxue-admin\\yingxue-ui\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\javafile\\yingxue-admin\\yingxue-ui\\src\\pages\\Detail\\index.vue?vue&type=template&id=fcd0e390&scoped=true&","dependencies":[{"path":"E:\\javafile\\yingxue-admin\\yingxue-ui\\src\\pages\\Detail\\index.vue","mtime":1652150310000},{"path":"E:\\javafile\\yingxue-admin\\yingxue-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1659166634376},{"path":"E:\\javafile\\yingxue-admin\\yingxue-ui\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1659166669128},{"path":"E:\\javafile\\yingxue-admin\\yingxue-ui\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1659166634376},{"path":"E:\\javafile\\yingxue-admin\\yingxue-ui\\node_modules\\vue-loader\\lib\\index.js","mtime":1659166660087}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}